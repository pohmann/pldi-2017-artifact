#!/bin/bash -e



###############################################################################
# --------------------------------------------------------------------------- #
# -------------------------- Do not edit this file -------------------------- #
# --------------------------------------------------------------------------- #
###############################################################################



# listing faults rather than using the sliver "Version.faults()" saves some
# time, as many bugs do not manifest as CSI-appropriate faults
# NOTE: we can't use a nice clean map here, because bash associative arrays
# don't support lists
faults_flex_1=( F_AA_1 F_AA_2 F_AA_3 F_AA_6 F_HD_1 F_HD_3 F_HD_4 F_HD_5 F_HD_7 F_HD_8 F_JR_2 F_JR_3 F_JR_4 F_JR_5 F_JR_6 )
faults_flex_2=( F_AA_2 F_AA_3 F_AA_4 F_HD_2 F_HD_4 F_HD_6 F_HD_7 F_HD_8 F_JR_1 F_JR_2 F_JR_3 F_JR_5 F_JR_6 )
faults_flex_3=( F_AA_2 F_AA_3 F_AA_4 F_AA_5 F_AA_6 F_HD_6 F_JR_2 F_JR_3 F_JR_5 )
faults_flex_4=( F_AA_1 F_AA_2 F_AA_3 F_AA_7 F_HD_1 F_HD_2 F_HD_5 F_JR_1 F_JR_2 F_JR_3 F_JR_4 )
faults_flex_5=( F_AA_4 F_HD_4 F_HD_5 F_HD_6 F_JR_2 )
faults_gcc_1=( singleton )
faults_grep_1=( FAULTY_F_DG_2 FAULTY_F_DG_4 FAULTY_F_DG_9 FAULTY_F_KP_2 FAULTY_F_KP_5 )
faults_grep_2=( FAULTY_F_DG_1 FAULTY_F_KP_3 FAULTY_F_KP_4 )
faults_grep_3=( FAULTY_F_DG_1 FAULTY_F_DG_10 FAULTY_F_DG_2 FAULTY_F_DG_3 FAULTY_F_DG_8 FAULTY_F_KP_2 FAULTY_F_KP_7 FAULTY_F_KP_9 )
faults_grep_4=( FAULTY_F_KP_8 FAULTY_F_DG_3 FAULTY_F_KP_6 )
faults_sed_2=( FAULTY_F_AG_11 FAULTY_F_AG_12 FAULTY_F_AG_14 FAULTY_F_AG_17 FAULTY_F_AG_19 FAULTY_F_AG_2 FAULTY_F_AG_20 )
faults_sed_3=( FAULTY_F_AG_11 FAULTY_F_AG_15 FAULTY_F_AG_17 FAULTY_F_AG_18 FAULTY_F_AG_5 FAULTY_F_AG_6 FAULTY_F_AG_9 )
faults_sed_4=( FAULTY_F_KRM_2 )
faults_sed_5=( FAULTY_F_KRM_1 FAULTY_F_KRM_10 FAULTY_F_KRM_2 FAULTY_F_KRM_5 FAULTY_F_KRM_8 )
faults_sed_6=( FAULTY_F_KRM_1 FAULTY_F_KRM_2 FAULTY_F_KRM_4 FAULTY_F_KRM_5 FAULTY_F_KRM_7 FAULTY_F_KRM_8 FAULTY_F_KRM_9 )
faults_sed_7=( FAULTY_F_KRM_1 FAULTY_F_KRM_2 FAULTY_F_KRM_5 FAULTY_F_KRM_6 )
faults_bash_1=(FAULTY_F_SPK_1 FAULTY_F_SPK_2 FAULTY_F_SPK_3 FAULTY_F_SPK_4 FAULTY_F_SPK_5 FAULTY_F_SPK_7 FAULTY_F_SPK_8 FAULTY_F_SPK_9 FAULTY_F_SPK_10 FAULTY_F_SK_8 FAULTY_F_SK_3 FAULTY_F_SK_2 FAULTY_F_SK_1 FAULTY_F_SK_7 FAULTY_F_SK_6 FAULTY_F_SK_5 FAULTY_F_SK_4 FAULTY_F_KP_10 FAULTY_F_KP_8 FAULTY_F_KP_9 FAULTY_F_KP_4 FAULTY_F_KP_5 FAULTY_F_KP_6 FAULTY_F_KP_7 FAULTY_F_KP_1 FAULTY_F_KP_2 FAULTY_F_KP_3 )
faults_bash_2=( FAULTY_F_SPK_1 FAULTY_F_SPK_2 FAULTY_F_SK_10 FAULTY_F_SPK_5 FAULTY_F_SK_4 FAULTY_F_KP_10 FAULTY_F_SK_3 FAULTY_F_SK_9 FAULTY_F_SK_8 FAULTY_F_KP_8 FAULTY_F_KP_9 FAULTY_F_SPK_3 FAULTY_F_SK_2 FAULTY_F_SK_1 FAULTY_F_KP_5 FAULTY_F_KP_6 FAULTY_F_KP_7 FAULTY_F_SK_7 FAULTY_F_KP_1 FAULTY_F_KP_2 FAULTY_F_KP_3 )
faults_bash_3=( FAULTY_F_SPK_1 FAULTY_F_SPK_2 FAULTY_F_SPK_3 FAULTY_F_SPK_4 FAULTY_F_SPK_5 FAULTY_F_SK_9 FAULTY_F_SK_8 FAULTY_F_SK_3 FAULTY_F_SK_2 FAULTY_F_SK_1 FAULTY_F_SK_7 FAULTY_F_SK_6 FAULTY_F_SK_5 FAULTY_F_SK_4 FAULTY_F_KP_7 FAULTY_F_KP_8 FAULTY_F_KP_9 FAULTY_F_KP_4 FAULTY_F_KP_5 FAULTY_F_KP_6 FAULTY_F_SK_10 FAULTY_F_KP_1 FAULTY_F_KP_2 FAULTY_F_KP_3 )
faults_bash_4=( FAULTY_F_SPK_1 FAULTY_F_SK_10 FAULTY_F_SPK_4 FAULTY_F_SPK_5 FAULTY_F_SK_4 FAULTY_F_SK_1 FAULTY_F_KP_10 FAULTY_F_SK_6 FAULTY_F_SK_5 FAULTY_F_SK_3 FAULTY_F_SK_8 FAULTY_F_KP_8 FAULTY_F_KP_9 FAULTY_F_KP_4 FAULTY_F_KP_6 FAULTY_F_KP_7 FAULTY_F_SPK_3 FAULTY_F_KP_1 FAULTY_F_KP_2 FAULTY_F_KP_3 )
faults_bash_5=( FAULTY_F_KP_10 FAULTY_F_KP_8 FAULTY_F_KP_9 FAULTY_F_KP_4 FAULTY_F_KP_5 FAULTY_F_KP_6 FAULTY_F_KP_7 FAULTY_F_KP_1 FAULTY_F_KP_2 FAULTY_F_KP_3 )
faults_bash_6=( FAULTY_F_KP_4 FAULTY_F_KP_5 FAULTY_F_KP_1 FAULTY_F_KP_2 FAULTY_F_KP_3 )
faults_gzip_1=( FAULTY_F_KL_2 FAULTY_F_KL_6 FAULTY_F_KP_1 FAULTY_F_KP_10 FAULTY_F_KP_11 FAULTY_F_KP_9 FAULTY_F_TW_3 )
faults_gzip_2=( FAULTY_F_KL_1 FAULTY_F_KL_3 FAULTY_F_KL_8 )
faults_gzip_4=( FAULTY_F_KL_1 FAULTY_F_KL_6 FAULTY_F_KL_7 FAULTY_F_KL_8 FAULTY_F_KP_3 FAULTY_F_KP_4 )
faults_gzip_5=( FAULTY_F_KL_1 FAULTY_F_KL_2 FAULTY_F_KL_3 FAULTY_F_KL_8 FAULTY_F_TW_1 FAULTY_F_TW_4 FAULTY_F_TW_5 )

# runNormal(): subroutine to appropriately call runApp for most applications
# @param app the application
# @param version the version number (NOTE: one at a time, as some apps don't
#                have faults for all versions)
# @param exeprefix any extra prefix added to the executable name; always extra
#                  subdirectories ($FAULT/$INST/exeprefix/$APP) (default="")
runNormal(){
  if [ $# -lt 2 -o $# -gt 3 ]
  then
    echo "runNormal parameters: app version# [exeprefix]"
    exit 1
  fi

  faultArr=faults\_$1\_$2[@]
  for fault in "${!faultArr}"
  do
    runApp $1 $2 false "" "" "$fault" "" 1 $3
  done
}

# runSiemens(): subroutine to appropriately call runApp for Siemens applications
# @param app the application
# @param versions the number of versions the app has (1..versions)
runSiemens(){
  if [ $# -ne 2 ]
  then
    echo "runSiemens parameters: app #versions"
    exit 1
  fi

  for version in `seq 1 $2`
  do
    runApp $1 $version true "" "" "singleton" "siemens/"
  done
}


if [ ${apps[flex]} -gt 0 ]
then
for version in `seq 1 5`
do
  runNormal "flex" $version
done
fi

if [ ${apps[gcc]} -gt 0 ]
then
runApp "gcc" 1 false "" "" "singleton" "" 1 "" false
fi

if [ ${apps[tcas]} -gt 0 ]
then
runSiemens "tcas" 41
fi

if [ ${apps[grep]} -gt 0 ]
then
for version in `seq 1 4`
do
  runNormal "grep" $version
done
fi

if [ ${apps[exif]} -gt 0 ]
then
runApp "exif" 1 false 5000 "FAULT_EXIF_MNOTE_DATA_CANON_UNSYNCED+FAULT_PRINTING_NULL_STRING_IN_M_MODE+FAULT_FEWER_THAN_2_JPEG_SECTIONS" "ALL"
fi

if [ ${apps[space]} -gt 0 ]
then
for version in `seq 1 38`
do
  runApp "space" $version true "" "" "singleton"
done
fi

if [ ${apps[schedule]} -gt 0 ]
then
runSiemens "schedule" 9
fi

if [ ${apps[print_tokens]} -gt 0 ]
then
runSiemens "print_tokens" 7
fi

if [ ${apps[bc]} -gt 0 ]
then
runApp "bc" 1 false 20 "" "FAULT_MORE_ARRAYS_V_COUNT" "" 1 "bc" false
fi

if [ ${apps[replace]} -gt 0 ]
then
runSiemens "replace" 32
fi

if [ ${apps[sanity]} -gt 0 ]
then
echo "Skipping sanity..."
fi

if [ ${apps[sed]} -gt 0 ]
then
for version in `seq 2 7`
do
  runNormal "sed" $version
done
fi

if [ ${apps[print_tokens2]} -gt 0 ]
then
runSiemens "print_tokens2" 10
fi

if [ ${apps[schedule2]} -gt 0 ]
then
runSiemens "schedule2" 10
fi

if [ ${apps[gzip]} -gt 0 ]
then
for version in 1 2 4 5
do
  runNormal "gzip" $version
done
fi
# NOTE: gzip should exclude 18-trace from each version...how?
# rm -Rf results_trace/$app/$app-$version/*/18-trace

if [ ${apps[tot_info]} -gt 0 ]
then
runSiemens "tot_info" 23
fi

if [ ${apps[ccrypt]} -gt 0 ]
then
runApp "ccrypt" 1 false 500 "" "FAULT_PROMPT_XREADLINE_NULL_CHECK" "" 1 "src" false
fi

if [ ${apps[bash]} -gt 0 ]
then
for version in `seq 1 6`
do
  runNormal "bash" $version "install/bin"
done
fi
